어떤 하나의 한 프로세스를 연속적인 메모리에 할당하려고 하는 것 자체가 부질없다.
비연속메모리 할당을 하려면
페이징(paging), segmentation (페이지별로 쪼개는게 아니라 의미별로 쪼개는거)

페이징은 일정한 크기로 나누다 보니까 외부 단편화가 생길 수 없음.
반면에 내부 단편화는 생김

특정 페이지 (보통 마지막에 생김 내부단편화가)

스택은 거꾸로올라오니까 마지막으로 할수능벗음

페이지는 고정된 크기로 나누기때무넹ㄴ

외부단편화문제보다는덜심각ㄱ함

오늘날 대부분시스템에선는 페이징 사용

세그멘테이션은 비연속 메모리 할당이기 때문에

세그먼트 연속 메모리 할당 비슷하게 외부 단편화 생길수잇음

장점은 세그먼트는 의미별로 나누기때뭄ㄴ에

스택,힙,등등 데이터를 담고 있어서 

코드영역은 바뀌면 안됨

워드처럼 크면 코드영역이ㅣ 커짐

비쥬얼스튜디오 코드영역에 대한 내용들이 여러개 할당되면 효율성이 떨어짐

공유해서 사용하기 위해 세그먼트라는 방법을 사용함

현실에서는 페이징,세그먼트 둘다 사용함.

세그멘테이션의 장점과 페이징

비연속 메모리 할당

페이징 

하나의 논리주소공간을 일정한 바이트들들로 나눈것을 한 페이지라고 함.

1kb 씩 똑같이 나눈것 

한 페이지를 담을 물리적 공간은 페이지 공간과 똑같이 필요함.

물리적인 메모리의 한 페이지를 담을 수 있도록 자른 것은

모든 페이지를 메모리에 할당

사용하지 않는 페이지들이 잇음.

하나의 프로세스안에 빈 페이지가 

페이지는 

하나의 프로세스는 4kb 가 다 필요해보이지만

실제 데이터는 4kb 안됨.

많은 부분이 비어져잇음.

하나의 물리적인 메모리에 여러 페이지들을 연속적이던 비연속적이던 할당함.

그럴려면 중간에 페이지 테이블의 도움을 받아야함.

페이지 테이블은 크기가 상당히 큼

cpu 내부에 두긴 어려움. 

메모리 어딘가 저장됨.

페이지 테이블의 내용도 메모리로 가져와야함.

1번 프로세스의 0번 페이지가 어디 저장되엇는지 보려면 페이지 테이블 조회

캐시 메모리의 도움을 받아 빈번하게 접근하는 시간을 줄임.

하나의 테이블을 두어서 매핑할 수 있다고 하면

어디에 저장되어잇느지 명확하게 접근

비연속적이어도 연속적인것처럼 접근이 가능해짐.

특정 프로세스 하나를 줫다햇을때

커널 페이지나 프로세스 페이지나 논리 주소 공간 부분들을 페이지 테이블을 통해서 실제 물리적인 메모리 어디에 저장되어 있던 상관 없이

논리적인 메모리로 접근하면 된다.

cpu 입장에서는 논리적인 주소를 통해 접근을 하는 것.

조건문 , 복잡한 연산식, 실제 물리적인 주소 찾기 

cpu 가 프로그램을 수행하기 위한 연산도 바쁜데,

메모리를 찾기에는 효율성이 떨어짐.

쉽게 매핑 정보를 찾기 위해서 mmu (cpu 포함)

cpu 가 사용ㅇ하고 잇는 논리주소를 통해 매핑테이블로 쉽게 하기 위해 다음가 같은 처리르 랗고 잇다.

Paging 의 예 간단한 예임.

확장해야됨.

어려운 내용이 아님
주의할 내용은

전체 메모리 32, 논리 15 

한 페이지를 얼만큼 크게 할거냐.

큰 책자로 만ㄷ르 것인지 소 책자롬 만들것이닞

한 페이지 크기를 4 바이트로 두면

연속되어진 4바이트를 한페이지로 구성

4바이트, 4바잍, 4바잍,

나누어서 한 페이지를 담을 수 잇는 공간으로 사용

한 페이지에 속해 잇는 바이트수가 4개이구나.

한 페이지 내에 10줄이 잇건 20줄이

20줄씩 묵으면 0~19까지 2진 비트값

한 페이지가 4바이트로 구성이 되어잇다고하면

2비트가 잇음 좋게삳

한페이지의 크기를 offset 값이 몇이닞

그 비트수만큼 

하위에서부터 2비트 만큼

3비트가 필요하면 3비트만큼

하위에서 잘라내낟

page offset 부분을 하위에서 잘라내고 

나머지가 page number이다.


4kb 2 ^ 2 * 10

2 ^ 12

한 페이지 내에 식별하기 위한 일련번호로 상ㅇ

0페이지, 1페이지, 2페이지


0페이지에 해당하는 블럭을 메모리 어딘가 할당하고자한다면

배열요소 0q 번



0번 페이지에 5번이다


5번 프레임에 할당되어잇다

시작은 한페이지를 얼마의 크기로 나누느냐

메모리 크기돚 ㅓㅇ해지고

논리적인 

어떤 번지수

1010 이 있다라고 하면

논리주소를 가지고

물리적인 주소를 어디가는지 계산하지 않고

하위 2번 빼고 2번이구나, 10 offset 으로 어딧구나 직관적을 알수잇음.


논리적인 주소만 보면 바로 물리적인 주소가 튀어나옴
복잡한 계산없음.

논리적인 주소가 12345678

현재 한 페이지의 크기를 4kb 하위 12비트를 가지고서 한 페이지의 offset 사용하면
상위 20비트 페이 번호

12345 sms apahfl djel wjwkdehlsi tkfvuqhrh 678 offset
는 메모리 어디 저장오니 살폏고 값 찾고

간다하게 실제 물맂겅니 주소를 접근

이건 중간고사때 곡물어볼것임.

한페이지의 크기가 얼마이냐

암기하려고도 하지마


숫자 하나만 바꿔도 다달라지기 때문에

암기하지 말고 인과관계를 따져 보기.

질문/?

TLB 라는 것은 

고속의 하드ㅡ웨어 캐시

메모리를 접근하기 위해서 또다른 메모리를 접근하는 문제가 발생하게 된다.

메모리 어디에 탑재되어잇는지는 어떻게 유지

다이나믹 로딩

메모리 어디에도 탑재 가능

여러개의 프로세스가 탑재

메모리 어딘가에 저장하는 것이 아니라 레지스터에 시작점과 크기만 저장.

레지스터에 저장하는 것이 전혀 문제가 되지 안흥ㅁ.

현재 프로세스의 크기

cpu 스케줄링

레지스터 값으 ㄹpcb 에 백업해두고

그저 한 프로세싀의 시작점ㄱ 

메모리를 접근하기 위해서 두번 접근할 피룡가 없다.

하나의 프로세스에 대핝 정보들을

수메가 페이지 테입블의 내용들을 모두 cpu 레지스터에 갖고 있을만큼 저장곤간이 여유롭지 못하다.

page table 은 메모리 커널 어딘가에 저장함.

커널 영역에대 저장하면 장점 : 연속 메모리 할당처럼 page table 레지스터 군단, 페이지 테이블을 메모리에 두고 사용햇을때 어떤 차이가 나겠어여ㅛ

cpu 안에 페이지 테이블을 직접 집어 놓ㅇ르 수 잇다한다면

메모리 두번 접근할 일은 발생하지 않는다.



그공간을 모든 프로세스마다 절대 공간을 둘 순 없다.

연속 메모리할당의 경우 각 프로세스이 시작점을저장하ㄴ고 잇는

pcb 복원백업

페이지테이블이 레지스터에 잇다고 하더라도 

하는 일들이 

페이지 테이블이 크기때문에 메모리를 추가로 접근하지 않는다하더라도

수메가 바이트의 메모리 (페이지테이블을)공간들을 처리한느것은 시간이 매우 오래걸리는일

오버헤드(시간0발생


즉각적으러 접근할수는 잇지만 

빈번하게 페이지테이블을 

컨텍스트스이ㅜ칭이 상대적으로 더디게진행됨.

저장공간도 부족하고 충분하다하더라도 효율적이지 않음.

근야 메모리에 두자.
컨텍스트쉬이칭 하력고 메모리에 백업할거면

그럼 처음 접근할때는 두번 메모리를 접근해서 조금 느려보이지만

최근에 접근햇던 페이지를 또접근하면 시간이 빠름'

하나의 프로세스를 위한 페이지 테이블 대부분은 비어잇는경우가 대부분임.

메모장도 2^32 다쓰지만

메모장으로 편집하는 데이터가 얼마나 많게산

대부분 다ㅣ 비어잇는 페이지 테이블을 보며 ㄴ

희소 테이블이라고 해서

중간이 다뚤려잇는 테이블

그런 부분들을 효율적으로 유지하기 위해서

TLB 라는 고속,병행적으로 수행할수 잇는 하드웨어 캐시

어떤 페이지의 프레임번호가 몇번인지 ㅊ메모리부터 최초한번가져오고

tlb 로 접근하면 되니까 

최초 한번은 메모리부터 가져오지만

다시 방분하고자할때는 tlb 캐시에 잇는 테이블을 가져와서 효율적임

페이지 테이블이 낭비되어지는 

산술적으로비교는어렵지만

굉장히 작은 범위로 사용한

페이지 테이블 크기를 줄이자

역페이지테이블 
하나의 페이지 테이블을 두고 각  프레임들이 어떤 프로세스의

하나의 프로세스테이블로 다수의 프로세스 가능

결국 페이지 테이블ㅋ크기는 늘어나는 일은 없음.

접근하는데 횽ㄹ성이 떨어짐.

프로세스 단위로 테이블은 물리적인 프레임을 바로 찾지만

하나 프로세스 테이블은 어딧는지 찾아야하므로 페이지 테이블을 계속 검사해야한다는 문제가잇음

접근 효울성이 떨어짐.

페이지 테이블을 공간적인 부분은 효율적이지만 시간적인 부분은 비효율

멀티레벨 페이지 테이블

페이지테이블을 다시 페이징

굉장히 많은 pag ㅜnumber 다시 페이징하면

페이지 테이블크기 자체를 줄여볼수잇음.


실질적으로 많이 사용되지는앟음.

세그멘테이션 각각의 프로세스 내용을

사실 세분화 할수이음

의미를 부여할수잇는 논비연속적인 공간들을 나눌수 잇다고 한다면

나눠진거에 기반해서 메모리에 할당

코드 세그먼트

한번할당해준것을 통해서

공유시키면되겟다

이코드세그먼트와 같다고 한다면

별도로 주지말고 하나의 영역에서 공유

프로세스 1, 2,


segment offset 로 잘라서 segment number

실제 시스템에션 segmentation with paging

논리적ㅇ니 단위로 나누되, 길이가 다르기 때문에 메모리할당

할당되어지는 메모리입장에서 보면 외부단편화가 심각함.

총합은 충분ㅇ히 크지마

곤란한 부분이 생겨서

메모리측면에선느 페이지 처럼 일정한

논리적인 주소공간을 통해서

세그먼트라는 의미를 ㄹ ㅇ쥬지

세그먼트로나누고 나누어진 세그먼트들을 페이지로 나누면

전체 프로세스롤 나눈것과 어떤차이가 잇을까요

장점 : 1번 2번 3번이 코드 세그먼트다

나랑 똑같은 다른 프로세스와 공유할 수 잇는영역이다

특정 페이지를 다른 프로세스와 공유가능

데이타 세그먼트 가 없다.

단점 : 내부 단편화가 문제가 더 많아짐.

이제는 하나의 프로세스에 내부 단편화가 

마지막 페이지는 1바이트다 
1023바이트는 논다.

코드세그먼트에서만 발생하는게 아니라

내부 단편화의 문제는 외부 단편화보단 상대적으로 감당할만함.

공유를 해서 ㅌ특정 세그먼트들들 ㅇ다시 할당하지 안하도 사용가능

오늘날 시스템이셔는 페지이함.

